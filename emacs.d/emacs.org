#+TITLE: Emacs.org
#+PROPERTY: :header-args: :tangle yes

* emacs.org
** What is this?
This is my emacs configuration in =org-mode=. It's loaded using =(org-babel-load-file "~/dotfiles/emacs.org")= from my =init.el=. It contains a lot of things inspired (stolen) from places around the on web such as:
- [[https://github.com/kwpav/dotfiles/blob/master/emacs.org][kwpav's config]]
- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's config]]
- [[https://github.com/TheBB/dotemacs][TheBB's config]]
- [[https://github.com/jwiegley/dot-emacs][jwiegly's config]]
- [[https://github.com/syl20bnr/spacemacs][Spacemacs]]
- [[https://github.com/hlissner/doom-emacs][Doom Emacs]]
- [[https://github.com/MatthewZMD/.emacs.d#org0f80f62][M-EMACS]]
- [[https://github.com/ianpan870102/yay-evil-emacs/blob/master/config.org][yay-evil]]
- [[https://framagit.org/steckerhalter/steckemacs.el/-/tree/master][steckemacs]]

It is divided into two major parts:
1. *Emacs* - settings and packages that change how emacs works/looks/etc
2. *Languages* - setup for programming languages
* Emacs
** Lexical binding
Lexical binding is supposed to make stuff faster
#+BEGIN_SRC emacs-lisp
  ;;; -*- lexical-binding: t -*-
#+END_SRC

** Personal Information
Who am I?
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Andrew Thompson"
        user-mail-address "github@downthewire.co.uk")
#+END_SRC

** Operating System
What OS am I running?
#+BEGIN_SRC emacs-lisp
  (setq *is-a-mac* (eq system-type 'darwin))
  (setq *is-linux* (eq system-type 'gnu/linux))
  (setq *is-windows* (eq system-type 'windows-nt))
#+END_SRC

Setup the home directory
#+BEGIN_SRC emacs-lisp
  (defconst ORG_DIR
    (if *is-windows*
        "C:/Dropbox/Andrew/org/"
      "~/Dropbox/Andrew/org/")
    "Home directory. Most of this lives on Dropbox to it can sync across machines.")
#+END_SRC
** Package Setup
Set up =straight.el= instead of the built-in =package.el= to manage my packages.

Using straight because:
- it allows me to exactly reproduce my config on other machines, it creates a =default.el= file that acts as a lockfile for package versions
- it gets the latest package versions from git
- it's integated well with =use-package=
- I can edit package code if I want to, and straight will rebuild the package
- lots of other stuff, the README is quite good

Use the develop branch, this needs to be set before the bootstrap code below.
#+BEGIN_SRC emacs-lisp
  (setq straight-repository-branch "develop")
#+END_SRC

Bootstrap code from the =straight.el= README
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

From the straight docs:
#+BEGIN_QUOTE
By setting the variable straight-cache-autoloads to a non-nil value, you can cause straight.el to cache the autoloads of all used packages in a single file on disk, and load them from there instead of from the individual package files if they are still up to date. This reduces the number of disk IO operations during startup from O(number of packages) to O(1), so it should improve performance. No other configuration should be necessary to make this work; however, you may wish to call straight-prune-build occasionally, since otherwise this cache file may grow quite large over time.
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
  (setq straight-cache-autoloads t)
#+END_SRC

Automatically enable =:straight t=, which is basically the same as =:ensure t= but for straight
#+BEGIN_SRC emacs-lisp
  (setq straight-use-package-by-default t)
#+END_SRC

install  =use-package= and related packages
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (use-package diminish) ;; for :diminish
  (use-package bind-key) ;; for :bind
#+END_SRC

Install =ensure-system-package=
#+BEGIN_SRC emacs-lisp
  (use-package use-package-ensure-system-package)
#+END_SRC

** Garbage Collection
Modify garbage collection. This is supposed to speed things up a bit.
#+BEGIN_SRC emacs-lisp
  (use-package gcmh
    :hook (after-init . gcmh-mode))
#+END_SRC

Increase the amount of data which Emacs reads from the process. Again the emacs default is too low 4k considering that the some of the language server responses are in 800k - 3M range.
#+BEGIN_SRC emacs-lisp
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
** Core
Things that modify or replace the core functionality of Emacs, or are needed by the rest of the config.

*** Saner Defaults
Settings for things that are defined in the C source code, so we use =emacs= as the package.
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :straight nil
    :init
    ;; answer with y/n instead of typing out yes/no
    (defalias 'yes-or-no-p 'y-or-n-p)
    :custom
    ;; load new source files instead of stale elisp bytecode
    (load-prefer-newer t)
    ;; allow emacs to be any size, removes black bars
    (frame-resize-pixelwise t))
#+end_src

Refresh (revert in Emacs' terms) buffers when files change on disk. Makes sure to update any version control info that changes also.
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :straight nil
    :custom
    (global-revert-check-vc-info t)
    :config
    (global-auto-revert-mode +1))
#+end_src

Use utf-8 for everything.
#+BEGIN_SRC emacs-lisp
    (use-package mule
      :straight nil
      :config
      (prefer-coding-system 'utf-8-unix)
      (set-default-coding-systems 'utf-8-unix)
      (set-language-environment 'utf-8)
      (set-terminal-coding-system 'utf-8-unix)
      (setq locale-coding-system 'utf-8-unix)
      (set-selection-coding-system 'utf-8-unix))
#+end_src

Emacs likes to create lots of extra files for things, these settings prevent that. Also, create a newline at the end of the file on save.
#+BEGIN_SRC emacs-lisp
  (use-package files
    :straight nil
    :config
    (setq
     backup-by-copying t
     backup-directory-alist '((".*" . "~/.emacs.d/backups/"))
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t
     vc-make-backup-files t
     recentf-max-menu-items 25
     recentf-max-saved-items 100))
#+end_src

Use the system clipboard for killing/yanking (copying/pasting) and display column information in the modeline.
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :straight nil
    :custom
    ;; killing and yanking uses the system clipboard
    (save-interprogram-paste-before-kill t)
    :config
    ;; display column info in the modeline
    (column-number-mode +1))
#+end_src

When the lines in a file are so long that performance could suffer to an unacceptable degree, we say "so long" to the slow modes and options enabled  in that buffer, and invoke something much more basic in their place.
#+BEGIN_SRC emacs-lisp
  (use-package so-long
    :straight nil
    :config
    (global-so-long-mode +1))
#+end_src

When you visit a file, point goes to the last place where it was when you previously visited the same file.
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :straight nil
    :config
    (save-place-mode +1))
#+end_src

Create =~/.emacs.d/etc/= and =~/.emacs.d/var/= to store files and data used by Emacs packages.
#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :init
    (setq no-littering-etc-directory
          (expand-file-name "etc/" user-emacs-directory))
    (setq no-littering-var-directory
          (expand-file-name "var/" user-emacs-directory)))
#+END_SRC

=show-paren-mode= highlights matching parentheses. The default delay is annoying so change it to =0=.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :straight nil
    :custom
    (show-paren-delay 0)
    :config
    (show-paren-mode +1))
#+end_src

*** Keys
To set up custom keys, I use a combination of:
- =general= - provides a leader key and gives us an easy way to define custom keys in =use-package=
- =which-key= - shows a list of all available keybindings, it works nicely with =general=, as it will show all the keybindings available after pressing ~SPC~
- =hydra= - create a "mode" (similar to how i3 does resize mode) for repeated actions
**** general
#+BEGIN_QUOTE
=general.el= provides a more convenient method for binding keys in emacs ... Like =use-package= ...
#+END_QUOTE

This creates a =leader=, which allows you to set up custom keys after pressing a certain key
- Keys for all modes appear after pressing ~SPC~ in normal and visual mode, or ~M-SPC~ in everything else.
- Mode specific keys appear after pressing ~SPC m~ in normal and visual mode, or ~M-,~ in everything else.

It also adds a =:general= use-package keyword, so this needs to be setup before that is used anywhere.

#+BEGIN_SRC emacs-lisp
  (use-package general
    :straight t
    :custom
    (general-override-states '(insert emacs hybrid normal visual motion operator replace))
    :config
    (general-define-key
     "C-w" 'backward-kill-word
     "C-c C-k" 'kill-region
     "C-x C-k" 'kill-region
     "C-x C-b" 'ibuffer
     "M-s" 'highlight-symbol-at-point
     "M-c" 'hi-lock-mode)

    (general-override-mode)
    (general-create-definer my-leader-def
      :prefix "C-c")
    (my-leader-def
      "a" 'org-agenda
      "c" 'comment-dwim
      "RET" 'make-frame-command
      ;; bookmarks
      "b" '(:ignore t :wk "bookmarks")
      "bs" 'bookmark-set
      "bg" 'bookmark-jump
      "bl" 'bookmark-bmenu-list
      ;; quit / restart
      "q" '(:ignore t :wk "quit / restart")
      "qq" 'save-buffers-kill-terminal
      "qr" 'restart-emacs)
    )

#+END_SRC
**** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight t
    :custom
    (which-key-idle-delay 0)
    :config
    (which-key-mode +1)
    (which-key-setup-minibuffer)
    (which-key-setup-side-window-bottom))
#+END_SRC
**** hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :straight t
    :defer t
    :general
    (my-leader-def
     "s" '(hydra-straight-helper/body :wk "pkgs"))
    :config
    (defhydra hydra-zoom (global-map "<f5>")
      "zoom"
      ("g" text-scale-increase "in")
      ("l" text-scale-decrease "out")
      ("r" (text-scale-set 0) "reset")
      ("0" (text-scale-set 0) :bind nil :exit t))
    (defhydra hydra-straight-helper (:hint nil :color green)

      "
  _c_heck all       |_f_etch all     |_m_erge all      |_n_ormalize all   |p_u_sh all
  _C_heck package   |_F_etch package |_M_erge package  |_N_ormlize package|p_U_sh package
  ----------------^^+--------------^^+---------------^^+----------------^^+------------||_q_uit||
  _r_ebuild all     |_p_ull all      |_v_ersions freeze|_w_atcher start   |_g_et recipe
  _R_ebuild package |_P_ull package  |_V_ersions thaw  |_W_atcher quit    |prun_e_ build"
      ("c" straight-check-all)
      ("C" straight-check-package)
      ("r" straight-rebuild-all)
      ("R" straight-rebuild-package)
      ("f" straight-fetch-all)
      ("F" straight-fetch-package)
      ("p" straight-pull-all)
      ("P" straight-pull-package)
      ("m" straight-merge-all)
      ("M" straight-merge-package)
      ("n" straight-normalize-all)
      ("N" straight-normalize-package)
      ("u" straight-push-all)
      ("U" straight-push-package)
      ("v" straight-freeze-versions)
      ("V" straight-thaw-versions)
      ("w" straight-watcher-start)
      ("W" straight-watcher-quit)
      ("g" straight-get-recipe)
      ("e" straight-prune-build)
      ("q" nil)))
#+END_SRC
**** keyfreq
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :straight t
    :config
    (keyfreq-autosave-mode 1))
#+END_SRC

*** Helm
#+begin_quote
Helm is a generic completion mechanism for Emacs
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :straight t
    :diminish
    :init (helm-mode t)
    :bind (("M-x"     . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-x b"   . helm-mini)     ;; See buffers & recent files; more useful.
           ("C-x r b" . helm-filtered-bookmarks)
           ("C-x C-r" . helm-recentf)  ;; Search for recently edited files
           ("C-c i"   . helm-imenu)
           ("C-h a"   . helm-apropos)
           ;; Look at what was cut recently & paste it in.
           ("M-y" . helm-show-kill-ring)

           :map helm-map
           ;; We can list ‘actions’ on the currently selected item by C-z.
           ("C-z" . helm-select-action)
           ;; Let's keep tab-completetion anyhow.
           ("TAB"   . helm-execute-persistent-action)
            ("<tab>" . helm-execute-persistent-action)))

  (setq helm-mini-default-sources '(helm-source-buffers-list
                                    helm-source-recentf
                                    helm-source-bookmarks
                                    helm-source-bookmark-set
                                    helm-source-buffer-not-found))

  (use-package helm-descbinds
    :straight t
    :config (helm-descbinds-mode))

  (use-package helm-make
    :straight t)
#+END_SRC

*** Search / Replace with Swoop
Replace keybindings for emacs search and evil search with swoop.
#+BEGIN_SRC emacs-lisp
  (use-package helm-swoop
    :straight t
    :config (setq helm-swoop-pre-input-function
                  (lambda () ""))
    :bind  (("C-s"   . 'helm-swoop)
            ("C-M-s" . 'helm-multi-swoop-all)
            ("C-S-s" . 'helm-swoop-back-to-last-point))
    :custom (helm-swoop-split-with-multiple-windows nil "Do not split window inside the current window."))
#+END_SRC

Add find and replace info to the modeline.
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :straight t
    :config
    (global-anzu-mode)
    (global-set-key [remap query-replace] 'anzu-query-replace)
    (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp))
#+END_SRC
*** Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :straight t
    :diminish                       ;; Don't show an icon in the modeline
    :config
      ;; Always have it on
      (global-undo-tree-mode)
      ;; Each node in the undo tree should have a timestamp.
      (setq undo-tree-visualizer-timestamps t)
      ;; Show a diff window displaying changes between undo nodes.
      (setq undo-tree-visualizer-diff t))
#+END_SRC
*** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :straight t
    :config (setq avy-background t)
    :bind ("C-'" . avy-goto-char-timer))
#+END_SRC
*** Text Editing
**** multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :straight t
    :defer t
    :general
    (my-leader-def
      "v" '(hydra-mc/body :wk "mv-mode"))
    :config
    (defhydra hydra-mc (:hint nil :color green)
      "
  Multiple Cursors
  -------------------
  _e_dit lines
  _n_ext like this
  _p_rev like this
  _a_ll like this
  "
      ("e" mc/edit-lines)
      ("n" mc/mark-next-like-this)
      ("p" mc/mark-previous-like-this)
      ("a" mc/mark-all-like-this)))
#+END_SRC
**** iedit
#+BEGIN_QUOTE
Iedit - Edit multiple regions in the same way simultaneously
#+END_QUOTE
Using the default keybinding of ~C-;~.
- All occurrences of a symbol, string or a region in the buffer are highlighted corresponding to the thing under the point, current mark and prefix argument. Refer to the document of =iedit-mode= for details.
- Edit one of the occurrences The change is applied to other occurrences simultaneously.
- Finish - by pressing ~C-;~ again
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :straight t)
#+END_SRC
** Startup
Use dashboard as a sensible startup screen.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :straight t
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (registers . 5)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-init-info (concat "Welcome "     user-full-name
                                      "! Emacs "      emacs-version
                                      "; System "     (system-name)
                                      "; Time "       (emacs-init-time))))
#+END_SRC

See how long startup takes with ~M-x esup~
#+BEGIN_SRC emacs-lisp
  (use-package esup
    :straight t
    :commands (esup))
#+end_SRC
** MacOS
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :straight nil
    :when *is-a-mac*
    :config
    (setq mac-command-modifier 'meta) ;; Mac atl/option to Control
    (setq mac-option-modifier 'control) ; Mac command to Meta
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark))
    (set-fontset-font t 'symbol (font-spec :family "Apple Symbols") nil 'prepend)
    (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))
#+END_SRC
** Custom File
Use a separate custom file to remove the autogenerated code from =init.el=.
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :straight nil
    :custom
    (custom-file (expand-file-name "custom.el" user-emacs-directory))
    :config
    (if (file-exists-p custom-file)
        (load-file custom-file)))
#+end_src
** Look and Feel
*** Change defaults
Use a non-blinking cursor for a more zen-like experience.
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :straight nil
    :config
    (blink-cursor-mode -1)
    (setq initial-scratch-message ""
          inhibit-startup-message t
          visible-bell nil
          ring-bell-function 'ignore
          initial-frame-alist
          '((menu-bar-lines . 0)
            (tool-bar-lines . 0)))
    (scroll-bar-mode 0)
    (tool-bar-mode 0)
    (menu-bar-mode 0)
    (global-hl-line-mode 1))
#+END_SRC

*** Theme
Theme I'm currently using
#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme
    :straight t
    :config
    (load-theme 'dracula))
#+END_SRC

*** Font
Font I'm currently using
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Fira Code-14"))
#+END_SRC
**** COMMENT other fonts
Other fonts I like
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Victor Mono-12"))
  (add-to-list 'default-frame-alist '(font . "Monoid HalfTight-10"))
  (add-to-list 'default-frame-alist '(font . "Monoid-10"))
  (add-to-list 'default-frame-alist '(font . "Hermit-12"))
  (add-to-list 'default-frame-alist '(font . "Lemon-12"))
  (add-to-list 'default-frame-alist '(font . "Uushi-11"))
  (add-to-list 'default-frame-alist '(font . "Cherry-13"))
  (add-to-list 'default-frame-alist '(font . "Scientifica-14" ))
  (add-to-list 'default-frame-alist '(font . "Curie-14" ))
  (add-to-list 'default-frame-alist '(font . "Fira Code-12" ))
  (add-to-list 'default-frame-alist '(font . "Hack-12" ))
  (add-to-list 'default-frame-alist '(font . "Input Mono Narrow-11" ))
  (add-to-list 'default-frame-alist '(font . "Hermit-10" ))
  (add-to-list 'default-frame-alist '(font . "Monaco-10" ))
  (add-to-list 'default-frame-alist '(font . "Fantasque Sans Mono-11" ))
  (add-to-list 'default-frame-alist '(font . "GohuFont-14" ))
  (add-to-list 'default-frame-alist '(font . "envypn-11" ))
#+END_SRC
*** Modeline
**** doom modeline
You need to run =M-x all-the-icons-install-fonts= to get the fancy fonts in the modeline

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :straight t
    :defer t)
#+END_SRC

=column-number-mode= displays the cursors current line on the modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :straight t
    :demand t
    :preface
    (defun my-doom-modeline-setup ()
      (column-number-mode +1)
      (doom-modeline-mode +1))
    :init (my-doom-modeline-setup)
    :custom
    (doom-modeline-vcs-max-length 50)
    (doom-modeline-buffer-file-name-style 'truncate-upto-project))
#+END_SRC
*** rainbow delimiters
Add rainbow delimiters in all programming language modes
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode)
    :config
    (setq show-paren-delay  0)
    (setq show-paren-style 'mixed))
#+END_SRC
*** beacon
Highlight the line where the point is 
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :straight t
    :diminish
    :config
    (setq beacon-color "#666600")
    (beacon-mode 1))
#+END_SRC

*** COMMENT  highlight indentation
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :straight nil
    :hook ((prog-mode web-mode) . highlight-indent-guides-mode)
    :custom
    (highlight-indent-guides-method 'character)
    (highlight-indent-guides-responsive 'top)
    (highlight-indent-guides-delay 0))
#+END_SRC
** Buffer & Window Management
*** COMMENT golden-ratio
This resizes the windows within an Emacs frame so that their sizes conform to the golden ratio. I've disabled it for now as its a bit annoying. 
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :straight t
    :diminish 
    :init (golden-ratio-mode 1))
#+END_SRC
*** ace-window
Make it easy to switch windows
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :straight t
    :config
    (global-set-key (kbd "M-o") 'ace-window))
#+END_SRC
*** switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :straight t
    :bind
    ("C-x o" . 'switch-window)
    :config
    (setq switch-window-shortcut-style 'qwerty))
#+END_SRC

*** iBuffer
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-saved-filter-groups
        '(("home"
           ("system-config" (or (filename . "dotfiles")
                                (filename . "emacs-config")))
           ("Org" (or (mode . org-mode)
                      (filename . "OrgMode")))
           ("code" (or (filename . "code")
                       (filename . ".py")
                       (filename . ".go")
                       (filename . ".java")))
           ("Web Dev" (or (mode . html-mode)
                          (mode . css-mode)))
           ("Directories" (mode . dired-mode))
           ("Help" (or (name . "\*Help\*")
                       (name . "\*Apropos\*")
                       (name . "\*info\*")))
           ("Builtin" (or (name . "\*Messages\*")
                          (name . "\*Completions\*")
                          (name . "\*Backtrace\*")
                          (name . "\*Compile-Log\*")
                          (name . "\*Calendar\*")
                          (name . "\*Calculator\*")
                          (name . "'*Scratch\*"))))))
  (add-hook 'ibuffer-mode-hook
            '(lambda ()
               (ibuffer-auto-mode 1)
               (ibuffer-switch-to-saved-filter-groups "home")))
  ; hide empty filter groups
  (setq ibuffer-show-empty-filter-groups nil)
#+END_SRC

** Project and File Management
*** dired
Some tips for using dired:
- Toggle =dired-details-mode= with ~(~
- Toggle writeable mode with ~C-x C-q~
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :straight nil
    :defer t
    :hook (dired-mode . dired-hide-details-mode)
    :general
    (my-leader-def
      "d" 'dired))

  ;; Colourful columns.
  (use-package diredfl
    :straight t
    :after dired
    :config
    (diredfl-global-mode +1))
#+END_SRC

Press ~C-(~ to get git info
#+BEGIN_SRC emacs-lisp
  (use-package dired-git-info
      :straight t
      :bind (:map dired-mode-map
                  ("C-(" . dired-git-info-mode)))
#+END_SRC
*** projectile
Projectile allows some nice things for projects, such as searching for files, managing buffers, etc.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :straight t
    :config
    (define-key projectile-mode-map (kbd "C-c h") 'projectile-command-map)
    (projectile-mode +1))

  (use-package ibuffer-vc
    :straight t
    :config
    (add-hook 'ibuffer-hook #'ibuffer-vc-set-filter-groups-by-vc-root))

  (use-package ibuffer-projectile
    :straight t)

  (use-package helm-projectile
    :straight t
    :after projectile
    :config
    (helm-projectile-on))
#+END_SRC
*** treemacs
A file tree.
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :straight t
    :defer t
    :general ([f8] 'treemacs))

  (use-package treemacs-projectile
    :straight t
    :after (projectile treemacs))

  (use-package treemacs-magit
    :straight t
    :after (treemacs))
#+END_SRC
** Org Mode
Setup =org-mode=. Most of these are functions that will get called in either the =:hook= or =:config= part of the =use-package= setup for =org=.

*** Look and Feel
Settings to make org mode look a bit nicer.

A lot of this stuff is from:
- http://blog.lujun9972.win/emacs-document/blog/2018/10/22/ricing-up-org-mode/index.html
- https://zzamboni.org/post/beautifying-org-mode-in-emacs/
- http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html

The prettify hook:
- =turn-on-visual-line-mode= for visual word wrap
- =variable-pitch-mode= to use a non =monospaced= font
- =org-superstar= provides good looking bullets for headers and lists
#+BEGIN_SRC emacs-lisp
  (defun my-org-prettify-hook ()
    (turn-on-visual-line-mode))

  (use-package org-superstar
    :straight t
    :ensure t
    :defer 3
    :hook (org-mode . org-superstar-mode)
    :init(setq org-superstar-prettify-item-bullets t
               org-superstar-leading-bullet ?\s
               org-hide-leading-stars t
               org-superstar-item-bullet-alist '((?* . ?●)
                                                 (?+ . ?➤)
                                                 (?- . ?—))))

#+END_SRC

Various settings to make things look nicer:
- =org-startup-indented= starts up =org-indent-mode=
- =org-src-fontify-natively= turns on syntax highlighting for =#+SRC= blocks
- =org-hide-emphasis-markers= hides the things that make text *bold*, /italics/, =monospaced=, etc.
- =org-fontify-whole-heading-line=  is useful when setting background colors for =org-level-*= faces
- =org-fontify-done-headline= make DONE headlines look nicer
- =org-fontify-quote-and-verse-blocks= makes quotes and verses italic
- =line-spacing= to give the text a bit more breathing room
- the =font-lock= part is a regex that uses a unicode bullet for lists (lines that start with "- " or "+ ")
  - this is only for the first level of lists, other levels arent replaced
#+BEGIN_SRC emacs-lisp
  (defun my-org-prettify-settings ()
    (setq org-startup-indented t
          org-src-fontify-natively t
          org-hide-emphasis-markers t
          org-fontify-whole-heading-line t
          org-fontify-done-headline t
          org-fontify-quote-and-verse-blocks t
          line-spacing 0.2))
#+END_SRC

**** htmlize
Provides syntax highlighting for =#+SRC= blocks in html exports.

Needed by =pelican= and =nikola=
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :straight t
    :defer t)
#+END_SRC
*** Setup for TODOs
- =org-use-fast-todo-selection=
  - Change the status of the todo state by pressing ~C-c C-c t <KEY>~
  - the =<KEY>= is the the letter in the parens after the state (e.g. =TODO(t)=)
- =org-todo-keywords=
  - add things to the TODO states besides =TODO= and =DONE=
  - mostly taken from from http://doc.norang.ca/org-mode.html
- =org-log-done=
  - insert time/date when moved to DONE

#+BEGIN_SRC emacs-lisp
  (defun my-org-todo-setup ()
    (setq org-use-fast-todo-selection t)
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "CURRENT(c)" "|" "DONE(d)")
            (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(a@/!)")))
    (setq org-log-done 'time))
#+END_SRC

*** Structure Templates
Add structure templates, e.g. type =<el= ~TAB~ for =#+BEGIN_SRC emacs-lisp #+END_SRC=
Existing templates for reference:
- https://orgmode.org/manual/Easy-templates.html

As of Emacs 27.1, =org-tempo= is required to use these.
#+BEGIN_SRC emacs-lisp
  (defun my-org-structure-templates ()
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sh" . "src sh")))
#+END_SRC

*** Capture Templates
#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :straight nil
    :general
    (my-leader-def
      "C" 'org-capture)
    :config
    (setq org-capture-templates
          '(
            ("c" "Note on current task" plain (clock) "%T from: %a \n %i \n %?")
            ("s" "Standup" entry (file+olp+datetree (concat ORG_DIR "todo.org") "Standup") "* Planned\n- %?\n %i\n %a")
            ("r" "To-Read" item (file+headline (lamdba () (concat ORG_DIR "personal.org")) "To Read") "")
            ("t" "Tasks")
            ("tw" "Work Task" entry (file+headline (lambda () (concat ORG_DIR "work/swrx.org")) "Tasks") "** TODO %?\n %i")
            ("tp" "Pesonal Task" entry (file+headline (lambda () (concat ORG_DIR "personal.org")) "Tasks") "* TODO %?\n %i\n %a")
            ("th" "Household Task" entry (file+headline (lambda () (concat ORG_DIR "clermiston-road.org")) "Tasks") "* TODO %?\n %i\n %a")

            ))

    (defun org-hugo-new-subtree-post-capture-template ()
      "Returns `org-capture' template string for new Hugo post.
  See `org-capture-templates' for more information."
      (let* ((title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
             (fname (org-hugo-slug title)))
        (mapconcat #'identity
                   `(
                     ,(concat "* TODO " title)
                     ":PROPERTIES:"
                     ,(concat ":EXPORT_FILE_NAME: " fname)
                     ":END:"
                     "%?\n")          ;Place the cursor here finally
                   "\n")))

    (add-to-list 'org-capture-templates
                 '("b"
                   "Blog Post"
                   entry
                   ;; It is assumed that below file is present in `org-directory'
                   ;; and that it has a "Blog Ideas" heading. It can even be a
                   ;; symlink pointing to the actual location of all-posts.org!
                   (file+olp "blog-posts.org" "Ideas")
                   (function org-hugo-new-subtree-post-capture-template))))
  (add-hook 'org-mode-hook (lambda ()
     "Beautify Org Checkbox Symbol"
     (push '("[ ]" . "☐") prettify-symbols-alist)
     (push '("[X]" . "☑" ) prettify-symbols-alist)
     (push '("[-]" . "❍" ) prettify-symbols-alist)
     (prettify-symbols-mode)))


#+end_src
*** Use Package
Put it all together with =use-package=.

The =org-src-mode-map= bit in the =:general= block maps ~:x~ to confirm and ~:q~ to abort when editing =SRC= blocks.

I dont need documentation for elisp in this config, so =my-disable-flycheck-for-elisp= disables flycheck for it.

=:custom-face= is mainly the setup for variable pitch mode:
- Set fonts for both variable and fixed pitch modes
- =org-indent= is to make =org-indent-mode= look right, otherwise the spacing is off
- The =org-level-*= stuff makes headings bigger.
- Several things should be in =fixed-pitch=, such as tables so  they are indented correctly
#+BEGIN_SRC emacs-lisp
  (let ((straight-current-profile 'pinned))
      (straight-use-package 'org-plus-contrib)
      (straight-use-package 'org)
      ;; Pin org-mode version.
      (add-to-list 'straight-x-pinned-packages
                   '("org" . "924308a150ab82014b69c46c04d1ab71e874a2e6")))
      (use-package org
        :straight nil
        :gfhook
        #'my-org-prettify-hook
        ('org-src-mode-hook #'my-disable-flycheck-for-elisp)
        :preface
        (defun my-disable-flycheck-for-elisp ()
          (setq flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
        :custom
        (setq org-agenda-files (list ORG_DIR (concat ORG_DIR "work") (concat ORG_DIR "journal")))

        :config
        (setq
         org-directory ORG_DIR
         org-startup-folded t)
        (define-key org-mode-map (kbd "C-'") nil) ;; This conflicts with avy
        (my-org-prettify-settings)
        (my-org-todo-setup)
        (my-org-structure-templates))
#+END_SRC
*** Org Pomodoro
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :straight t)
#+END_SRC
*** Org Journal
#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :straight t
    :defer t
    :config
    (setq org-journal-dir (concat ORG_DIR "journal"))
    (setq org-journal-date-format "%A %d %B %Y")
    (setq org-journal-time-format "%H:%M")
    (setq org-journal-enable-agenda-integration t)
    (setq org-journal-file-format "%Y%m%d.org")
    :bind ("C-x C-j" . org-journal-new-entry))
#+END_SRC

*** Org Babel
=org-babel-do-load-languages= enables languages for in-buffer evaluation
#+BEGIN_SRC emacs-lisp
  (use-package org-babel
    :no-require
    :straight nil
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t))))
#+END_SRC

*** Org Roam
#+BEGIN_SRC emacs-lisp
  (if *is-windows*
      (add-to-list 'exec-path "C:\\bin"))

  (use-package org-roam
    :straight t
    :config
    (setq org-roam-directory (concat ORG_DIR "roam"))
    :hook (add-hook 'after-init-hook 'org-roam-mode))

  (defhydra hydra-org-roam (:exit t :idle 0.8)
    "Launcher for `org-roam'."
    ("i" org-roam-insert "insert")
    ("f" org-roam-find-file "find-file")
    ("v" org-roam-buffer-activate "backlinks"))
  (global-set-key (kbd "C-c r") 'hydra-org-roam/body)

  (use-package org-roam-server
    :straight t
    :ensure t
    :config
    (setq org-roam-server-host "127.0.0.1"
          org-roam-server-port 8080
          org-roam-server-authenticate nil
          org-roam-server-export-inline-images t
          org-roam-server-serve-files nil
          org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
          org-roam-server-network-poll t
          org-roam-server-network-arrows nil
          org-roam-server-network-label-truncate t
          org-roam-server-network-label-truncate-length 60
          org-roam-server-network-label-wrap-length 20))

#+END_SRC

*** Anki Editor
#+BEGIN_SRC emacs-lisp
  (use-package anki-editor
    :straight t
    :after org
    :bind (:map org-mode-map
                ("<f12>" . anki-editor-cloze-region-auto-incr)
                ("<f11>" . anki-editor-cloze-region-dont-incr)
                ("<f10>" . anki-editor-reset-cloze-number)
                ("<f9>"  . anki-editor-push-tree))
    :hook (org-capture-after-finalize . anki-editor-reset-cloze-number) ; Reset cloze-number after each capture.
    (org-mode . anki-editor-mode)
    :config
    (setq anki-editor-create-decks t ;; Allow anki-editor to create a new deck if it doesn't exist
          anki-editor-org-tags-as-anki-tags t
          anki-editor-use-math-jax t
          org-my-anki-file org-default-notes-file)
          ;; Org-capture templates
    (add-to-list 'org-capture-templates
                 '("a" "Anki basic"
                   entry
                   (file+headline org-my-anki-file "Dispatch Shelf")
                   "* %<%H:%M>   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic\n:ANKI_DECK: Mega\n:END:\n** Front\n%?\n** Back\n%x\n"))
    (add-to-list 'org-capture-templates
                 '("A" "Anki cloze"
                   entry
                   (file+headline org-my-anki-file "Dispatch Shelf")
                   "* %<%H:%M>   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:ANKI_DECK: Mega\n:END:\n** Text\n%x\n** Extra\n"))
    (defun anki-editor-cloze-region-auto-incr (&optional arg)
      "Cloze region without hint and increase card number."
      (interactive)
      (anki-editor-cloze-region my-anki-editor-cloze-number "")
      (setq my-anki-editor-cloze-number (1+ my-anki-editor-cloze-number))
      (forward-sexp))
    (defun anki-editor-cloze-region-dont-incr (&optional arg)
      "Cloze region without hint using the previous card number."
      (interactive)
      (anki-editor-cloze-region (1- my-anki-editor-cloze-number) "")
      (forward-sexp))
    (defun anki-editor-reset-cloze-number (&optional arg)
      "Reset cloze number to ARG or 1"
      (interactive)
      (setq my-anki-editor-cloze-number (or arg 1)))
    (defun anki-editor-push-tree ()
      "Push all notes under a tree."
      (interactive)
      (anki-editor-push-notes '(4))
      (anki-editor-reset-cloze-number))
    ;; Initialize
    (anki-editor-reset-cloze-number)
    )

#+END_SRC

*** Writing
Some things to make writing nicer.

Olivetti centers the text and sets a minimum width. It makes reading things, especially on widescreens, a bit nicer.
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :straight t
    :defer t
    :custom
    (olivetti-body-width 90))
#+end_src

Writegood highlights text based on a set of weasel-words, passive-voice and duplicate words.
#+BEGIN_SRC emacs-lisp
  (use-package writegood-mode
    :straight t
    :defer t)
#+end_src

Enable the minor modes I use for writing
#+BEGIN_SRC emacs-lisp
  (defun my/writing-modes ()
    (interactive)
    (flyspell-mode +1)
    (olivetti-mode +1)
    (writegood-mode +1))
#+end_src
*** Flyspell
#+BEGIN_SRC emacs-lisp
  (setenv "LANG" "en_GB")
  (use-package flyspell
    :straight t
    :diminish
    :hook ((prog-mode . flyspell-prog-mode)
         ((org-mode text-mode) . flyspell-mode))
    :config
    (if *is-windows*
        (progn
        (setq ispell-program-name "C:\\ProgramData\\chocolatey\\bin\\hunspell.exe")
        (add-to-list 'ispell-dictionary-alist '("en_GB" "[[:alpha:]]" "[^[:alpha:]]" "[']" t ("-d" "en_GB") nil utf-8))
        (setq ispell-local-dictionary-alist ispell-dictionary-alist)
        (setq ispell-hunspell-dictionary-alist ispell-dictionary-alist))
      (setq ispell-program-name "/usr/local/bin/aspell"))
    (setq ispell-dictionary "en_GB")
    (setq ispell-silently-savep t)
    (setq ispell-personal-dictionary "~/.emacs.d/.aspell.en.pws"))
#+END_SRC
*** Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :straight t
    :bind
    ("C->" . er/expand-region)
    ("C-<" . er/contract-region))

#+END_SRC
** Elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed-dashboard
    :straight t
    :ensure t
    :config
    (setq elfeed-dashboard-file (concat ORG_DIR "elfeed-dashboard.org"))
    ;; update feed counts on elfeed-quit
    (advice-add 'elfeed-search-quit-window :after #'elfeed-dashboard-update-links))

  (use-package elfeed-org
    :straight t
    :custom
    (elfeed-org)
    :config
    (setq rmh-elfeed-org-files (list (concat ORG_DIR "elfeed.org"))))
  (use-package elfeed-goodies
    :straight t)

  (use-package elfeed
    :straight t
    :config
    (setq elfeed-db-directory (concat ORG_DIR ".elfeed")))
#+END_SRC

** Code
Things that are used when coding.
*** Line Numbers
Add line numbers to programming mode buffers. I think they look wierd in my org config due to the different sized fonts.
#+BEGIN_SRC emacs-lisp
  (use-package display-line-numbers
    :straight nil
    :ghook
    ('prog-mode-hook #'display-line-numbers-mode))
#+END_SRC
*** flycheck
Enable error checking everywhere.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :straight t
    :general
    (my-leader-def
      "f" '(hydra-flycheck-mode/body :wk "flycheck-mode"))
    :config
    (defhydra hydra-flycheck-mode (:hint nil :color green)

      "
  Find Errors        Describe Errors
  -----------------------------------
  _f_irst error      _s_how error
  _n_ext error       _e_xplain error
  _l_ist errors      ^ ^
  "
      ("f" flycheck-first-error)
      ("n" flycheck-next-error)
      ("l" flycheck-list-errors)
      ("s" flycheck-display-error-at-point)
      ("e" flycheck-explain-error-at-point))
      (global-flycheck-mode +1))
#+END_SRC
*** company
Company provides code completion.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :straight t
    :diminish
    :config
    :ensure t
    :config
    (global-company-mode 1)
    (setq ;; Only 1 letters required for completion to activate.
     company-minimum-prefix-length 1
     ;; Search other buffers for compleition candidates
     company-dabbrev-other-buffers t
     company-dabbrev-code-other-buffers t
     ;; Show candidates according to importance, then case, then in-buffer frequency
     company-transformers '(company-sort-by-backend-importance
                            company-sort-prefer-same-case-prefix
                            company-sort-by-occurrence)
     ;; Flushright any annotations for a compleition;
     ;; e.g., the description of what a snippet template word expands into.
     company-tooltip-align-annotations t
     ;; Allow (lengthy) numbers to be eligible for completion.
     company-complete-number t
     ;; M-⟪num⟫ to select an option according to its number.
     company-show-numbers t
     ;; Show 10 items in a tooltip; scrollbar otherwise or C-s ^_^
     company-tooltip-limit 10
     ;; Edge of the completion list cycles around.
     company-selection-wrap-around t
     ;; Do not downcase completions by default.
     company-dabbrev-downcase nil
     ;; Even if I write something with the ‘wrong’ case,
     ;; provide the ‘correct’ casing.
     company-dabbrev-ignore-case nil
     ;; Immediately activate completion.
     company-idle-delay 0)

    ;; Use C-/ to manually start company mode at point. C-/ is used by undo-tree.
    ;; Override all minor modes that use C-/; bind-key* is discussed below.
    (bind-key* "C-/" #'company-manual-begin)

    ;; Bindings when the company list is active.
    :bind (:map company-active-map
                ("C-d" . company-show-doc-buffer) ;; In new temp buffer
                ("<tab>" . company-complete-selection)
                ;; Use C-n,p for navigation in addition to M-n,p
                ("C-n" . (lambda () (interactive) (company-complete-common-or-cycle 1)))
                ("C-p" . (lambda () (interactive) (company-complete-common-or-cycle -1)))))

#+END_SRC

*** Smart Scan
#+BEGIN_SRC emacs-lisp
  (use-package smartscan
    :straight t
    :hook ((prog-mode . smartscan-mode))
    :config
    (global-set-key (kbd "M-n") 'smartscan-symbol-go-forward)
    (global-set-key (kbd "M-p") 'smartscan-symbol-go-backward)
    (global-set-key (kbd "M-'") 'my/symbol-replace))

  (defun my/symbol-replace (replacement)
    "Replace all standalone symbols in the buffer matching the one at point."
    (interactive  (list (read-from-minibuffer "Replacement for thing at point: " nil)))
    (save-excursion
      (let ((symbol (or (thing-at-point 'symbol) (error "No symbol at point!"))))
        (beginning-of-buffer)
        ;; (query-replace-regexp symbol replacement)
        (replace-regexp (format "\\b%s\\b" (regexp-quote symbol)) replacement))))

#+END_SRC
*** language server protocol
Setup for Microsoft's (GASP!) Language Server Protocol. Any language that uses this calls =lsp= in the language mode's =:hook= / =:ghook=

#+BEGIN_QUOTE
The Language Server Protocol (LSP) defines the protocol used between an editor or IDE and a language server that provides language features like auto complete, go to definition, find all references etc.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :straight t
    :hook (lsp-mode . lsp-enable-which-key-integration)
    (go-mode . lsp-deferred)
    :commands lsp
    :custom
    (lsp-completion-provider :capf)
    (lsp-keymap-prefix "C-c l"))

  (custom-set-faces
   '(lsp-face-highlight-read ((t (:background "gray"))))
   '(lsp-face-highlight-textual ((t (:background "gray"))))
   '(lsp-face-highlight-write ((t (:background "SteelBlue1"))))
   '(lsp-ui-doc-background ((t (:background "black")))))

  (use-package lsp-ui
    :straight t
    :ensure t
    :commands lsp-ui-mode
    :config (setq lsp-ui-doc-enable t
                  lsp-ui-peek-enable t
                  lsp-ui-sideline-enable t
                  lsp-ui-imenu-enable t
                  lsp-ui-flycheck-enable t))

  (use-package helm-lsp
    :straight t
    :commands (helm-lsp-workspace-symbol))

  (use-package lsp-treemacs
    :straight t
    :commands lsp-treemacs-errors-list)
  (use-package dap-mode
    :straight t)
#+END_SRC

Some handy links
- https://emacs-lsp.github.io/lsp-mode/page/performance/
*** COMMENT electric pair
Use the built in =electric-pair-mode= to autocomplete brackets.
#+BEGIN_SRC emacs-lisp
  (use-package elec-pair
    :straight t
    :hook
    (prog-mode . electric-pair-mode)
    (org-mode . electric-pair-mode))
#+END_SRC
*** yasnippet
Use snippets in specific modes
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :straight t
   :custom
   (yas-snippet-dirs
    '("~/.emacs.d/snippets"))
   :config
   (yas-global-mode +1))
#+END_SRC

Install the official snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :straight t
    :after yasnippet)
#+END_SRC
*** editorconfig
Use editorconfig for projects that have them

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :straight t
    :delight
    :config
    (editorconfig-mode +1))
#+END_SRC
** Version Control
*** magit
use git in emacs!

=magit-yank-branch-name= is from https://emacs.stackexchange.com/questions/30487/add-copy-to-kill-ring-current-branch-name-with-magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight t
    :defer t
    :general
    ("C-x g" 'magit-status)
    (my-leader-def
      "g" '(:ignore t :wk "git")
      "gs" 'magit-status
      "gc" 'magit-checkout
      "gC" 'magit-commit
      "gb" 'magit-blame
      "gS" 'magit-stage-file
      "gU" 'magit-unstage-file
      "gg" 'hydra-my-git-menu/body
      "gy" 'my/magit-yank-branch-name)
    :config
    (defun my/magit-yank-branch-name ()
      "Show the current branch in the echo-area and add it to the `kill-ring'."
      (interactive)
      (let ((branch (magit-get-current-branch)))
        (if branch
            (progn (kill-new branch)
                   (message "%s" branch))
          (user-error "There is not current branch")))))
#+END_SRC
*** git-timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :straight t
    :defer t)
#+END_SRC
*** git-messenger
Show commit info
#+BEGIN_SRC emacs-lisp
  (use-package git-messenger
    :straight t
    :defer t)
#+END_SRC
*** git-gutter-fringe
Show whether something has been added, modified, or deleted on the side of the screen.
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe
    :straight t
    :config
    (global-git-gutter-mode +1)
    (setq-default fringes-outside-margins t))
#+end_src
*** COMMENT git-gutter-fringe old
This doesn't look great with modus-themes, so commenting it out for now.
Taken from the doom-emacs config.
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe
    :straight t
    :config
    (global-git-gutter-mode +1)
    (setq-default fringes-outside-margins t)
    (define-fringe-bitmap 'git-gutter-fr:added
      [240 240 240 240 240 240 240 240 240 240 240 240 240 240]
      nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:modified
      [240 240 240 240 240 240 240 240 240 240 240 240 240 240]
      nil nil 'center)
    (define-fringe-bitmap 'git-gutter-fr:deleted
      [0 0 0 128 192 224 240 248]
      nil nil 'center)
    (fringe-helper-define 'git-gutter-fr:added '(center repeated)
      "XXX.....")
    (fringe-helper-define 'git-gutter-fr:modified '(center repeated)
      "XXX.....")
    (fringe-helper-define 'git-gutter-fr:deleted 'bottom
      "X......."
      "XX......"
      "XXX....."
      "XXXX...."))
#+END_SRC
*** git-link
Get the URLs for links/commits/repo homepages. This is useful for PRs and tickets when you need to link to a certain line of code.

#+BEGIN_SRC emacs-lisp
  (use-package git-link
    :straight t
    :general
    (my-leader-def
      "gl" '(:ignore t :wk "git link")
      "gll" 'git-link
      "glc" 'git-link-commit
      "glh" 'git-link-homepage))
#+end_src
*** browse-at-remote
This is almost the opposite of =git-link=, it will open selected line(s) on the remote (e.g. github).
#+BEGIN_SRC emacs-lisp
  (use-package browse-at-remote
    :straight t
    :general
    (my-leader-def
      "glg" 'browse-at-remote))
#+end_src
*** My Git Hydra

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-my-git-menu (global-map "<f7>"
                                          :color blue)
    "
  ^Navigate^        ^Action^               ^Info^
  ^^^^^^^^^^^^---------------------------------------------------
  _j_: next hunk    _s_: stage hunk        _d_: diff
  _k_: prev hunk    _S_: stage file        _c_: show commit
  ^ ^               _U_: unstage file      _g_: magit status
  ^ ^               ^ ^                    _t_: git timemachine
  ^ ^               ^ ^                    ^ ^
  "
    ("j" git-gutter:next-hunk)
    ("k" git-gutter:previous-hunk)
    ("s" git-gutter:stage-hunk)
    ("S" magit-stage-file)
    ("U" magit-unstage-file)
    ("c" git-messenger:popup-show)
    ("g" magit-status :exit t)
    ("d" magit-diff-buffer-file)
    ("t" git-timemachine :exit t)
    ("q" quit-window "quit-window")
    ("<ESC>" git-gutter:update-all-windows "quit" :exit t))
#+END_SRC

Git timemachine
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-my-git-timemachine-menu (:color blue)
    ("s" git-timemachine "start")
    ("j" git-timemachine-show-next-revision "next revision")
    ("k" git-timemachine-show-previous-revision "prev revision")
    ("c" git-timemachine-show-current-revision "curr revision")
    ("<ESC>" git-timemachine-show-current-revision "quit" :exit t))
#+END_SRC
** System Specific
*** OSX
Paths need to be explicitly defined for some reason in OSX.
=exec-path-from-shell= fixes it.
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :straight nil
    :if (eq system-type 'darwin)
    :config
    (exec-path-from-shell-initialize))
#+END_SRC

Enable ligatures for fonts that have them
Only seems to work on railwaycat/homebrew-emacsmacport
#+BEGIN_SRC emacs-lisp
  ;; (when (eq system-type 'darwin)
  ;;   (mac-auto-operator-composition-mode))
#+END_SRC

Use python 3 by default
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq python-shell-interpreter "/usr/local/bin/python3"))
#+END_SRC

OSX displays a big yellow warning sign for a visual bell and I think its annoying. This flashes the modeline instead.
Taken from here https://www.emacswiki.org/emacs/AlarmBell
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq visible-bell nil
          ring-bell-function 'flash-mode-line)
    (defun flash-mode-line ()
      (invert-face 'mode-line)
      (run-with-timer 0.1 nil #'invert-face 'mode-line)))
#+end_src

Point to the git executable, this is supposed to speed up =magit=
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq magit-git-executable "/usr/bin/git"))
#+end_src
** Other
*** restart
Yo dawg, use =restart-emacs= to restart emacs within emacs.
Using this because I'm constantly making changes to this file and sometimes I need to restart things for changes to take affect.
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :straight t
    :defer t)
#+END_SRC
*** restclient
Test RESTful APIs in emacs!
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :straight t
    :defer  t)

  (use-package company-restclient
    :straight t
    :defer t)

  (use-package ob-restclient
    :straight t
    :defer t)
#+END_SRC
** Java
#+BEGIN_SRC emacs-lisp
  (use-package lsp-java
    :straight t
    :config (add-hook 'java-mode-hook 'lsp))
#+END_SRC

** Go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :straight t
    :custom
    (defun lsp-go-install-save-hooks ()
      (add-hook 'before-save-hook #'lsp-format-buffer t t)
      (add-hook 'before-save-hook #'lsp-organize-imports t t))
    (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
    :general
    (my-leader-def
      "p" '(hydra-go-mode/body :wk "go-mode"))
    :config
    (defhydra hydra-go-mode (:hint nil :color green)

      "
  Imports             Describe             GoTo
  --------------------------------------------------------
  _ig_ import go      _d_escribe           _ga_ arguments
  _ia_ import add     _j_ump to definition _gd_ docstring
  _ir_ import remove  ^ ^                  _gf_ function
  ^ ^                 ^ ^                  _gn_ function name
  ^ ^                 ^ ^                  _gr_ return values
  "
      ("ig" go-goto-imports)
      ("ia" go-import-add)
      ("ir" go-remove-unused-imports)
      ("d" godef-describe)
      ("j" godef-jump)
      ("ga" go-goto-arguments)
      ("gd" go-goto-docstring)
      ("gf" go-goto-function)
      ("gn" go-goto-function-name)
      ("gr" go-goto-return-values)))
#+END_SRC

** Docker
Docker is not necessarily a programming langage, but....

=Dockerfile= is
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :straight t
    :defer t)
#+END_SRC

Use =docker= commands in Emacs
#+BEGIN_SRC emacs-lisp
  (use-package docker
    :straight t
    :defer t)
#+END_SRC

** Kubernetes
#+BEGIN_SRC emacs-lisp
  (use-package kubernetes
    :straight t
    :commands (kubernetes-overview))
#+END_SRC

** Haskell
For xmonad and beyond
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :straight t
    :mode "\\.hs\\'"
    :hook (haskell-mode . turn-on-haskell-indent))
#+END_SRC
** Javascript
*** Vanilla
Setup for JavaScript using =js2-mode= and =LSP=.

LSP mode is using =typescript-language-server=.
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :straight t
    :mode "\\.js$"
    :hook (js2-mode . lsp)
    :interpreter "node"
    :ensure-system-package ((typescript-language-server . "npm i -g typescript-language-server")
                            (eslint_d . "npm i -g eslint_d"))
    :custom
    ;; set the indent level to 2
    (js2-basic-offset 2)
    (js-chain-indent t)
    (js-indent-level 2)
    ;; use eslint_d instead of eslint for faster linting
    (flycheck-javascript-eslint-executable "eslint_d"))
#+END_SRC

*** JSON
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :straight t
    :mode "\\.json\\'")
#+END_SRC

*** REPL
Setup up a javascript repl using =skewer=
#+BEGIN_SRC emacs-lisp
  (use-package skewer-mode
    :straight t
    :defer t
    :ghook ('js2-mode-hook)
    :general
    (my-local-leader-def 'js2-mode-map
      "eb" 'skewer-eval-defun
      "el" 'skewer-eval-last-expression))
#+END_SRC

To use, =M-x run-skewer= and then =M-x skewer-repl=
** COMMENT Latex
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :straight t)
  (use-package company-auctex
    :straight t)
#+END_SRC
** Lisp
*** Keys
All lisp languages have a set of shared keys:
| Key     | Command        |
|---------+----------------|
| C-c e b | eval buffer    |
| C-c e l | eval last sexp |
| C-c e d | eval defun     |
| C-c e r | eval region    |

Some languages have some more, but those are the base keys for all lisps.

Replace =+prefix=  with =+eval= in =which-key= for =C-c e=
#+BEGIN_SRC emacs-lisp
  (which-key-add-major-mode-key-based-replacements 'clojure-mode "C-c e" "eval")
  (which-key-add-major-mode-key-based-replacements 'emacs-lisp-mode "C-c e" "eval")
  (which-key-add-major-mode-key-based-replacements 'hy-mode "C-c e" "eval")
  (which-key-add-major-mode-key-based-replacements 'lisp-interaction-mode "C-c e" "eval")
  (which-key-add-major-mode-key-based-replacements 'scheme-mode "C-c e" "eval")
#+end_src
*** Shared
Shared setup for all lisp modes.

A list of all lisp modes that I use. This is used with =:ghook= to enable =lispy= in all of these modes.
#+BEGIN_SRC emacs-lisp
  (defconst my-lisp-mode-hooks
    '(lisp-mode-hook
      sly-mrepl-mode-hook
      emacs-lisp-mode-hook
      scheme-mode-hook
      geiser-repl-mode-hook
      hy-mode-hook
      inferior-hy-mode-hook
      clojure-mode-hook
      cider-repl-mode-hook))
#+END_SRC

Now setup packages that will be used for all the lisp modes above.
- =lispy= inserts matching parentheses, among other things.
- turn off =smartparens= because it is not needed with =lispy= (it also adds pairs for single quotes, which is annoying in lisp)
- =lispyville= makes =evil-mode= play nice with =lispy=

#+BEGIN_SRC emacs-lisp
  (defun my-lisp-setup ()
    (electric-pair-mode -1))

  (use-package paredit
    :straight nil
    :defer t
    :ghook my-lisp-mode-hooks
    :gfhook #'my-lisp-setup)
#+END_SRC
*** Emacs Lisp
#+BEGIN_SRC emacs-lisp
  (my-leader-def
    :keymaps 'emacs-lisp-mode-map
    "eb" 'eval-buffer
    "el" 'eval-last-sexp
    "ed" 'eval-defun
    "er" 'eval-region)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (my-leader-def
    :keymaps 'lisp-interaction-mode-map
    "eb" 'eval-buffer
    "el" 'eval-last-sexp
    "ed" 'eval-defun
    "er" 'eval-region)
#+end_src

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+end_src
*** Clojure
=lsp= is using [[https://github.com/snoe/clojure-lsp][snoe/clojure-lsp]]
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :straight t
    :hook ((clojure-mode . lsp)
           (clojurec-mode . lsp)
           (clojurescript-mode . lsp))
    :config
    (dolist (m '(clojure-mode
                 clojurec-mode
                 clojurescript-mode
                 clojurex-mode))
      (add-to-list 'lsp-language-id-configuration `(,m . "clojure")))
    (setq lsp-enable-indentation nil))
#+END_SRC

CIDER is the Clojure(Script) Interactive Development Environment that Rocks!

=cider-repl-set-ns= sets the repl's namespace (ns) to the current file so you can eval and then use functions without adding the ns
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :straight t
    :after clojure-mode
    :hook (cider-repl-mode . rainbow-delimiters-mode)
    :general
    (my-local-leader-def 'clojure-mode-map
      "r" 'cider
      "n" 'cider-repl-set-ns
      "er" 'cider-eval-region
      "eb" 'cider-eval-buffer
      "el" 'cider-eval-last-sexp))
#+END_SRC
*** Common Lisp
**** Sly
#+BEGIN_SRC emacs-lisp
  (use-package sly
    :straight t
    :defer t
    :hook (sly-mrepl-mode . rainbow-delimiters-mode)
    :general
    (my-local-leader-def
      :keymaps 'lisp-mode-map
      "eb" 'sly-eval-buffer
      "el" 'sly-eval-last-expression
      "ed" 'sly-eval-defun
      "er" 'sly-eval-region)
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl"))

  (use-package sly-quicklisp
    :straight t
    :after sly)

  (use-package sly-asdf
    :straight t
    :after sly)
#+end_src
**** COMMENT Slime
Using this to mess with stumpwm right now.
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :straight t
    :defer t
    :general
    (my-local-leader-def
      :keymaps 'lisp-mode-map
      "eb" 'slime-eval-buffer
      "el" 'slime-eval-last-expression
      "ed" 'slime-eval-defun
      "er" 'slime-eval-region)
    :custom
    (inferior-lisp-program "/usr/bin/sbcl")
    (slime-contribs '(slime-fancy)))

  (use-package slime-company
    :straight t
    :config
    (slime-setup '(slime-company)))
#+END_SRC
*** Hy
Let's get hy. A lisp for Python.
#+BEGIN_SRC emacs-lisp
  (use-package hy-mode
    :straight t
    :mode "\\.hy\\'"
    :general
    (my-local-leader-def 'hy-mode-map
      "er" 'hy-shell-eval-region
      "eb" 'hy-shell-eval-buffer
      "el" 'hy-shell-eval-last-sexp
      "ed" 'hy-shell-eval-current-form))
#+END_SRC
*** Scheme
=geiser= provides a nice repl for *scheme* and other things
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :straight t
    :defer t
    :general
    (my-local-leader-def
      :keymaps 'scheme-mode-map
      "r" 'run-geiser
      "er" 'geiser-eval-region
      "eR" 'geiser-eval-region-and-go
      "eb" 'geiser-eval-buffer
      "eB" 'geiser-eval-buffer-and-go
      "ed" 'geiser-eval-definition
      "eD" 'geiser-eval-definition-and-go
      "el" 'geiser-eval-eval-sexp)
    :custom
    (geiser-active-implementations '(guile mit racket)))
#+END_SRC

** Python
For =flycheck= to work, install =flake8=.

LSP uses the [[https://github.com/palantir/python-language-server][palantir python language server]] (pyls).
#+BEGIN_SRC emacs-lisp
  (use-package python
    :straight t
    :mode "\\.py\\'"
    :ghook
    ('python-mode-hook #'lsp)
    :general
    (my-local-leader-def 'python-mode-map
      "er" 'python-shell-send-region
      "eb" 'python-shell-send-buffer
      "ef" 'python-shell-send-file
      "es" 'python-shell-send-string))
#+END_SRC

Use =pipenv= to handle virtual environments
#+BEGIN_SRC emacs-lisp
  (use-package pipenv
    :straight t
    :hook ((python-mode . pipenv-mode)
           (hy-mode . pipenv-mode))
    :init
    (setq pipenv-projectile-after-switch-function #'pipenv-projectile-after-switch-extended))
#+END_SRC
** Web Mode
Set up web mode for html and css files
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :straight t
    :defer t
    :preface
    (defun my-web-mode-hook ()
      ;; set the html indent to 2
      (setq web-mode-markup-indent-offset 2)
      ;; highlight matching elements in html
      (setq web-mode-enable-current-element-highlight 1))
    :hook (web-mode . my-web-mode-hook)
    :init
    (add-hook 'web-mode-before-auto-complete-hooks
              '(lambda ()
                 (let ((web-mode-cur-language
                        (web-mode-language-at-pos))))))
    (add-to-list `auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list `auto-mode-alist '("\\.css\\'" . web-mode)))
#+END_SRC
** YAML
For editing =.yml= files
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :straight t
    :defer t)
#+END_SRC
* TODO Things to do
An on-going list of things I want to change
- [ ] Look into the build in =js-mode= in place of =js2-mode= and =rjsx=, it can now work with =jsx= files
- [ ] setup and use org capture
  - this looks cool too https://addons.mozilla.org/en-US/firefox/addon/org-capture/
- [ ] window management hydra?
- [ ] make jumping better
  - [ ] use 'ac' package jumps along with smart and dumb jump?
  - [ ] make keybindings consistent
  - [ ] lsp!
- [ ] org-roam should use general
** Cool looking packages to check out
- =purpose= - https://github.com/bmag/emacs-purpose
  - window/buffer management
- =eglot= - https://github.com/joaotavora/eglot
  - lightweight LSP
- =targets= - https://github.com/noctuid/targets.el
  - operate on text objects
- =git-gitter=
- =diff-hl= - like =git-gutter=
- =shackle= - https://github.com/wasamasa/shackle
  - control popup windows
- =smart-mode-line=
- =minions=
  - minor modes in the modeline?
- =moody=
  - powerline-esque modeline
- =github-notifier= - https://github.com/xuchunyang/github-notifier.el
  - github notification count in the modeline
- =emacs-libvterm= - https://github.com/akermu/emacs-libvterm
- =prescient= - sorts candiates in ivy, company, etc
- =company-box= show cool icons in company results
- =org-present= org mode presentations
- =selectrum= replacement for ivy
- =ctrlf= replacement for swiper
